#!/usr/bin/perl -w

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Config::JSON;

our $VERBOSITY = 0;

use constant {
	STATE_OK => 0,
	STATE_WARNING => 1,
	STATE_CRITICAL => 2,
	STATE_UNKNOWN => 3,
};

sub getSmartctl{
	my $smartctl = shift;
	my $device = shift;
	my @output = `$smartctl -a $device`;
	return \@output;
}

sub readDbJSON{
	my $dbJSON = shift;
	return(Config::JSON->new($dbJSON));
}

sub checkWhichDevice{
	my $dbConfig = shift;
	my @smartctlOut = @{(shift)};
	my @device = grep { /Model Family/i || /Device Model/i } @smartctlOut;

	my $devices_h = $dbConfig->get("Devices");
	my @deviceCfg;
	foreach my $key (keys %$devices_h){
		foreach(@device){
			if(($_ =~ $devices_h->{$key}->{'Device'}->[0]) ||
			($_ =~ $devices_h->{$key}->{'Device'}->[1])){
				return ($devices_h->{$key}->{'Device'},$devices_h->{$key}->{'ID#'});
			}
		}
	}
}

MAIN: {
	my ($smartctl, $device, $dbJSON);
	if ( !(GetOptions(
		'v|verbose' => sub { $VERBOSITY = 1 },
		'vv' => sub { $VERBOSITY = 2 },
		'vvv' => sub { $VERBOSITY = 3 },
		'h|help' => sub {displayHelp();},
		'p|path=s' => \$smartctl,
		'd|device=s' => \$device,
		'dbj|dbjson=s' => \$dbJSON
	)))	{
		displayUsage();
		exit(STATE_UNKNOWN);
	}
	# Check smartclt tool
	if(!defined($smartctl)){
		$smartctl = "/usr/sbin/smartctl";
	}
	# The device must be present
	if(!defined($device)){
		print "Error: Valid device to check is required.\n";
		displayUsage();
		exit(STATE_UNKNOWN);
	}
	my $output = getSmartctl($smartctl,$device);
	my $dbConfig = readDbJSON($dbJSON);
	my ($deviceName,$IDs) = checkWhichDevice($dbConfig,$output);
	use Data::Dumper;
	print Dumper($deviceName);
	print Dumper($IDs);

}